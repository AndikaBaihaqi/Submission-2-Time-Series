# -*- coding: utf-8 -*-
"""Submission_2_Time_Series

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SkrvPkJAD-1_dptNomAwrS2TGK065J4W

## Import Libraries
"""

import pandas as pd
import numpy as np
import os, zipfile
import matplotlib.pyplot as plt
from google.colab import files

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

import tensorflow as tf
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.models import Sequential

"""## Load & Explore Dataset

### Estimated energy consumption Dominion Virginia Power (DOM) in Megawatts
### Dataset: https://www.kaggle.com/datasets/robikscube/hourly-energy-consumption/data
"""

uploaded = files.upload()

df = pd.read_csv('/content/DOM_hourly.csv')
df.head()

df.isna().sum()

dates = df['Datetime'].values
DOM_MW = df['DOM_MW'].values

df['Datetime'] = pd.to_datetime(df['Datetime'])
df.info()

plt.figure(figsize=(16, 4))
plt.plot(DOM_MW, c='b', label='Hourly power consumption (MW)')
plt.title('DOM hourly power consumption data - BEFORE NORMALIZATION', fontsize=16)
plt.xlabel('Datetime')
plt.ylabel('Energy')
plt.legend()
plt.show()

DOM_MW = df['DOM_MW'].values.reshape(-1,1)
scaler = MinMaxScaler(feature_range=(0,1))
DOM_MW  = scaler.fit_transform(DOM_MW)
DOM_MW.shape

plt.figure(figsize=(16, 4))
plt.plot(DOM_MW, c='b', label='Hourly power consumption (MW)')
plt.title('DOM hourly power consumption data - AFTER NORMALIZATION', fontsize=16)
plt.xlabel('Datetime')
plt.ylabel('Energy')
plt.legend()
plt.show()

"""## Data Spliting"""

X_train, X_test, y_train, y_test = train_test_split(DOM_MW, dates, test_size=0.2, shuffle=False)
print("X_train length:", len(X_train))
print("X_test length:", len(X_test))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(X_train, window_size=60, batch_size=64, shuffle_buffer=1000)
test_set  = windowed_dataset(X_test, window_size=60, batch_size=64, shuffle_buffer=1000)

"""## Modelling"""

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(64, return_sequences=True, input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

model.summary()

# model compiling
learning_rate=1.0000e-04
lr = learning_rate
optimizer = tf.keras.optimizers.SGD(lr, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(), optimizer=optimizer, metrics=["mae"])

threshold_mae = (DOM_MW.max() - DOM_MW.min()) * 10/100
print("The maximum limit of mae value (10%) from the data is", threshold_mae)

# callbacks
lr_schedule = tf.keras.callbacks.LearningRateScheduler(
  lambda epoch: learning_rate * 10**(epoch / 25))

early_stopping = tf.keras.callbacks.EarlyStopping(
    patience=5,
    monitor='val_mae',
    verbose=1
)

history = model.fit(train_set, epochs=100, validation_data=test_set, verbose=2, callbacks=[lr_schedule, early_stopping])

"""## Plotting"""

plt.figure(figsize=(15, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'], linestyle='--')
plt.title('MAE')
plt.ylabel('MAE')
plt.xlabel('Epoch')
plt.legend(['Training Set', 'Validation Set'])
plt.grid(linestyle='--', linewidth=1, alpha=0.5)

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'], linestyle='--')
plt.title('Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Training Set', 'Validation Set'])
plt.grid(linestyle='--', linewidth=1, alpha=0.5)

plt.show()